**พื้นฐานของ Shell Script**

Shell Script คือไฟล์ข้อความที่ประกอบไปด้วยชุดคำสั่งของระบบปฏิบัติการ Linux ซึ่งช่วยให้ผู้ใช้งานสามารถรันคำสั่งต่าง ๆ ได้โดยอัตโนมัติ แทนที่จะต้องพิมพ์ทีละคำสั่ง การเขียน Shell Script มีโครงสร้างพื้นฐานและคำสั่งเฉพาะที่ใช้บ่อย ดังนี้:

---

### 1. **การสร้างและเรียกใช้ Shell Script เบื้องต้น**

   - **การสร้างไฟล์ Script**:
     สร้างไฟล์สคริปต์ใหม่ โดยใช้คำสั่ง `touch` หรือ `nano` เช่น `nano myscript.sh`
   - **การเริ่มต้นไฟล์ Script**:
     เริ่มต้นสคริปต์ด้วย `#!/bin/bash` ซึ่งบอกให้ระบบรู้ว่าจะใช้ Bash interpreter ในการรันไฟล์นี้
   - **การให้สิทธิ์การรันสคริปต์**:
     ใช้คำสั่ง `chmod` เพื่อให้สิทธิ์การรัน เช่น `chmod +x myscript.sh`
   - **การรันสคริปต์**:
     ใช้คำสั่ง `./myscript.sh` เพื่อเรียกใช้สคริปต์

---

### 2. **การแสดงผลข้อความด้วย `echo`**

   - ใช้คำสั่ง `echo` เพื่อแสดงผลข้อความออกทางหน้าจอ เช่น:
     ```bash
     #!/bin/bash
     echo "Hello, World!"
     ```

---


### 3. **การรับค่าจากผู้ใช้งาน**

   - ใช้คำสั่ง `read` เพื่อรับค่าจากผู้ใช้ เช่น:
     ```bash
     #!/bin/bash
     echo "กรุณาใส่ชื่อของคุณ:"
     read name
     echo "สวัสดี $name!"
     ```

---

### 4. **ตัวแปรใน Shell Script**

   - การกำหนดตัวแปรสามารถทำได้ง่าย ๆ โดยไม่ต้องใส่เครื่องหมาย `$` เมื่อกำหนดตัวแปร แต่ต้องใส่ `$` เมื่อเรียกใช้งาน เช่น:
     ```bash
     #!/bin/bash
     my_variable="Hello"
     echo "$my_variable, World!"
     ```

---

### 5. **การใช้เงื่อนไข `if`**

   - การใช้ `if` เพื่อควบคุมการทำงานตามเงื่อนไขต่าง ๆ:
     ```bash
     #!/bin/bash
     echo "กรุณาใส่ตัวเลข:"
     read number
     if [ "$number" -gt 10 ]; then
         echo "ตัวเลขมากกว่า 10"
     else
         echo "ตัวเลขน้อยกว่าหรือเท่ากับ 10"
     fi
     ```

ตัวดำเนินการเปรียบเทียบอื่น ๆ ที่ใช้บ่อย
•	-lt : น้อยกว่า (less than)
•	-le : น้อยกว่าหรือเท่ากับ (less than or equal to)
•	-ge : มากกว่าหรือเท่ากับ (greater than or equal to)
•	-eq : เท่ากับ (equal to)
•	-ne : ไม่เท่ากับ (not equal to)

A >= 80
•	B>=70  <80
•	C>=60 <70
•	D>=50 <60
•	F <50

#!/bin/bash 
num=15
 if [ "$num" -gt 10 ] && [ "$num" -lt 20 ]; then
       echo "$num อยู่ในช่วงระหว่าง 10 ถึง 20" 
elif [ "$num" -gt 10 ] && [ "$num" -lt 20 ]; then
       echo "$num อยู่ในช่วงระหว่าง 10 ถึง 20" 
else 
echo"$num ไม่ได้อยู่ในช่วงระหว่าง 10 ถึง 20" fi

if [ "$score" -ge 80 ]; then 
      echo "เกรดของคุณคือ A" 
elif [ "$score" -ge 70 ] && [ "$score" -lt 80 ]; then 
      echo "เกรดของคุณคือ B" 
elif [ "$score" -ge 60 ] && [ "$score" -lt 70 ]; then 
      echo "เกรดของคุณคือ C" 
elif [ "$score" -ge 50 ] && [ "$score" -lt 60 ]; then 
      echo "เกรดของคุณคือ D" 
else 
      echo "เกรดของคุณคือ F" 
fi





---

### 6. **การใช้ลูป `for`**

   - ลูป `for` ใช้ในการรันคำสั่งซ้ำ ๆ ตามจำนวนรอบที่กำหนด:
     ```bash
     #!/bin/bash
     for i in 1 2 3 4 5; do
         echo "รอบที่ $i"
     done
     ```
#!/bin/bash
     for i in {31 .. 51}; do
         echo "รอบที่ $i"
     done


#!/bin/bash

# กำหนดจำนวนชั้นของพีระมิด
rows=5

# ใช้ loop เพื่อพิมพ์พีระมิด
for ((i = 1; i <= rows; i++)); do
    # พิมพ์ช่องว่างให้เป็นรูปพีระมิด
    for ((j = i; j < rows; j++)); do
        echo -n " "
    done
    # พิมพ์เครื่องหมาย * เพื่อสร้างพีระมิด
    for ((k = 1; k <= (2 * i - 1); k++)); do
        echo -n "*"
    done
    # ขึ้นบรรทัดใหม่หลังพิมพ์แต่ละชั้นของพีระมิด
    echo
done


---

### 7. **การใช้ลูป `while`**

   - ลูป `while` ใช้ในการรันคำสั่งซ้ำ ๆ จนกว่าค่าเงื่อนไขจะเป็นเท็จ:
     ```bash
     #!/bin/bash
     counter=1
     while [ $counter -le 5 ]; do
         echo "นับครั้งที่ $counter"
         ((counter++))
     done
     ```

---

### 8. **ฟังก์ชันใน Shell Script**

   - ฟังก์ชันช่วยให้สามารถจัดกลุ่มคำสั่งเพื่อเรียกใช้ซ้ำได้ง่ายขึ้น:
     ```bash
     #!/bin/bash
     greet() {
         echo "สวัสดี $1!"
     }
     greet "นักเรียน" "ครู"
     ```

---

### 9. **การจัดการกับ Command-Line Arguments**

   - สามารถรับค่าจากการเรียกใช้สคริปต์ด้วย `$1`, `$2` ซึ่งเป็นตำแหน่งของอาร์กิวเมนต์ที่ส่งมา:
     ```bash
     #!/bin/bash
     echo "อาร์กิวเมนต์แรกคือ $1"
     echo "อาร์กิวเมนต์ที่สองคือ $2"
     ```

---

### 10. **การเขียนผลลัพธ์ลงไฟล์**

   - ใช้ `>` หรือ `>>` เพื่อเขียนหรือเพิ่มข้อมูลลงในไฟล์:
     ```bash
     #!/bin/bash
     echo "บันทึกข้อความลงไฟล์" > output.txt
     echo "ข้อความเพิ่มเติม" >> output.txt
     ```

---

การทดสอบ Shell Script สามารถทำได้หลายวิธีเพื่อให้แน่ใจว่า Script ทำงานได้ถูกต้องตามที่ตั้งใจ วิธีเหล่านี้สามารถช่วยตรวจสอบและแก้ไขข้อผิดพลาดได้:

---

### 1. **การรัน Script โดยตรง**

   - เปิดเทอร์มินัลแล้วรันสคริปต์โดยตรง เพื่อดูว่าผลลัพธ์ตรงตามที่คาดหวังหรือไม่:
     ```bash
     ./myscript.sh
     ```
   - ถ้าไม่ได้รับอนุญาตให้รัน ลองให้สิทธิ์การรันก่อนด้วยคำสั่ง:
     ```bash
     chmod +x myscript.sh
     ```

### 2. **การใช้ `bash -x` (Debug Mode)**

   - รันสคริปต์ในโหมด Debug เพื่อดูการทำงานของแต่ละบรรทัด:
     ```bash
     bash -x myscript.sh
     ```
   - โหมดนี้จะแสดงคำสั่งและค่าของตัวแปรทั้งหมดก่อนการรันจริง ช่วยให้ระบุจุดที่เกิดข้อผิดพลาดได้ง่ายขึ้น

### 3. **การใช้ `echo` ในการตรวจสอบค่าและการทำงาน**

   - เพิ่มคำสั่ง `echo` เพื่อแสดงค่าของตัวแปรในแต่ละจุด โดยเฉพาะในจุดที่มีเงื่อนไขหรือการวนลูป เช่น:
     ```bash
     echo "ค่าของตัวแปร x คือ $x"
     ```

### 4. **ตรวจสอบสถานะการคืนค่าด้วย `$?`**

   - ทุกคำสั่งใน Linux จะคืนค่าเลขสถานะ (Exit Status) ที่บอกว่าคำสั่งนั้นสำเร็จหรือไม่ (0 หมายถึงสำเร็จ):
     ```bash
     ./myscript.sh
     echo "Exit status: $?"
     ```
   - ใช้คำสั่งนี้เพื่อตรวจสอบว่าคำสั่งทำงานสำเร็จหรือมีข้อผิดพลาด

### 5. **ใช้ `shellcheck` เพื่อตรวจสอบข้อผิดพลาด**

   - `shellcheck` เป็นเครื่องมือวิเคราะห์ Shell Script โดยเฉพาะ สามารถช่วยตรวจหาข้อผิดพลาดได้ เช่น:
     ```bash
     shellcheck myscript.sh
     ```
   - เครื่องมือนี้จะระบุจุดที่ควรแก้ไข พร้อมคำแนะนำการแก้ปัญหา

### 6. **การใช้ Redirect สำหรับตรวจสอบผลลัพธ์**

   - บันทึกผลลัพธ์ของสคริปต์ลงในไฟล์เพื่อตรวจสอบในภายหลัง:
     ```bash
     ./myscript.sh > output.log
     ```
   - ใช้ Redirect สำหรับ Error โดยเฉพาะ:
     ```bash
     ./myscript.sh 2> error.log
     ```

### 7. **ทดสอบด้วย Input และ Arguments ต่างๆ**

   - ลองรัน Script โดยส่งอาร์กิวเมนต์ต่าง ๆ เพื่อดูว่าสคริปต์ทำงานได้ตามที่ต้องการหรือไม่ เช่น:
     ```bash
     ./myscript.sh arg1 arg2
     ```

### 8. **การใช้เงื่อนไขตรวจสอบภายใน Script**

   - เพิ่มการตรวจสอบเงื่อนไขและข้อความแจ้งเตือนใน Script โดยใช้ `if` และการเปรียบเทียบค่า:
     ```bash
     if [ -z "$1" ]; then
         echo "Error: No arguments provided."
         exit 1
     fi
     ```


