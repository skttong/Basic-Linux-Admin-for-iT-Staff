### ตัวอย่างคำสั่ง `crontab`

1. **การอัปเดตซอฟต์แวร์ทุกวันเวลา 2:00 AM**
   ```bash
   0 2 * * * sudo apt-get update && sudo apt-get upgrade -y
   ```
   
2. **การสำรองข้อมูลทุกวันเวลา 10:30 PM**
   ```bash
   30 22 * * * tar -czf /backup/mybackup_$(date +\%Y\%m\%d).tar.gz /home/user
   ```

3. **รีบูตเครื่องทุกสัปดาห์ในวันจันทร์เวลา 4:00 AM**
   ```bash
   0 4 * * 1 /sbin/reboot
   ```

4. **การตรวจสอบพื้นที่ดิสก์และส่งอีเมลเมื่อใช้พื้นที่เกิน 80% ทุก 30 นาที**
   ```bash
   */30 * * * * df -h | grep -E '^/dev' | awk '{ if ($5+0 > 80) print $0 }' | mail -s "Disk Space Alert" user@example.com
   ```

5. **การลบไฟล์ log เก่าที่มีอายุมากกว่า 30 วันทุกวันเวลา 3:00 AM**
   ```bash
   0 3 * * * find /var/log -type f -name "*.log" -mtime +30 -exec rm {} \;
   ```

6. **การส่งรายงานการใช้งานระบบไปยังอีเมลทุกวันเวลา 8:00 AM**
   ```bash
   0 8 * * * top -b -n 1 | mail -s "System Report" user@example.com
   ```

7. **การเปิดใช้งาน firewall ทุกวันเวลา 12:00 PM**
   ```bash
   0 12 * * * ufw enable
   ```



8. **การบันทึกคำสั่งที่ใช้งานในแต่ละวันทุกวันเวลา 6:00 PM**
   ```bash
   0 18 * * * history >> /home/user/command_history.txt
   ```

9. **การรีสตาร์ท Apache ทุกวันเวลา 5:00 AM**
   ```bash
   0 5 * * * systemctl restart apache2
   ```

10. **การทดสอบการเชื่อมต่อกับเว็บไซต์ทุกวันเวลา 9:00 AM และบันทึกผลการทดสอบลงในไฟล์**
    ```bash
    0 9 * * * curl -Is https://www.example.com | head -n 1 >> /home/user/website_status.log
    ```

---

### โจทย์ให้ทดลองทำ

1. **กำหนดให้ระบบทำการตรวจสอบการใช้งาน CPU ทุก 10 นาทีและส่งอีเมลเมื่อใช้งาน CPU มากกว่า 90%**
2. **ตั้งให้ระบบลบไฟล์ที่มีอายุเกิน 60 วันในไดเรกทอรี `/tmp` ทุก 1 ชั่วโมง**
3. **ทำให้ระบบบันทึก log ของคำสั่งที่รันทั้งหมดทุกวันเวลา 7:00 AM**
4. **ตั้งค่าให้ระบบรีบูตเครื่องทุกวันเวลา 3:30 AM**
5. **ตั้งให้ระบบอัปเดตฐานข้อมูลแพ็กเกจและอัปเกรดซอฟต์แวร์ทุกวันเวลา 1:00 PM**
6. **สร้าง cron job ที่จะสำรองข้อมูลจาก `/home/user` ไปที่ `/backup` ทุกสัปดาห์ในวันเสาร์เวลา 11:00 PM**
7. **ตั้งค่า cron job เพื่อให้ระบบรีสตาร์ทบริการ nginx ทุก 2 ชั่วโมง**
8. **ตั้งให้ระบบเช็คสถานะของเซิร์ฟเวอร์ทุกวันเวลา 10:00 AM และส่งรายงานไปที่อีเมล**
9. **ตั้งให้ระบบตรวจสอบพื้นที่ดิสก์ทุก 15 นาทีและส่งอีเมลเมื่อพื้นที่เกิน 80%**
10. **ตั้งค่า cron job ให้ระบบบันทึกสถิติการใช้งาน RAM ทุก 5 นาทีและเก็บข้อมูลไว้ในไฟล์ `/var/log/mem_usage.log`**

---


การทดสอบ `cron jobs`

---

### 1. **เปิดการตั้งค่า cron job**

- ใช้คำสั่ง `crontab -e` เพื่อเปิดไฟล์การตั้งค่า cron job:
  ```bash
  crontab -e
  ```

  จากนั้นเพิ่มหรือแก้ไข cron job ตามที่ต้องการ เช่น:
  ```bash
  0 5 * * * echo "Hello, cron job!" >> /home/user/cron_test.log
  ```

  คำสั่งข้างต้นจะให้ cron job บันทึกข้อความ "Hello, cron job!" ลงในไฟล์ `cron_test.log` ทุกวันเวลา 5:00 AM

- เมื่อแก้ไขเสร็จแล้ว ให้บันทึกและปิดไฟล์:
  - ถ้าใช้ `vi` หรือ `vim` ให้กด `Esc` จากนั้นพิมพ์ `:wq` แล้วกด `Enter`
  - ถ้าใช้ `nano` ให้กด `Ctrl + X` แล้วเลือก `Y` เพื่อบันทึกการเปลี่ยนแปลง

---

### 2. **ตรวจสอบ cron job ที่ตั้งค่าไว้**

- ใช้คำสั่ง `crontab -l` เพื่อตรวจสอบว่า cron job ของคุณถูกตั้งค่าอย่างถูกต้อง:
  ```bash
  crontab -l
  ```

  คำสั่งนี้จะแสดงรายการ cron jobs ที่ตั้งค่าไว้ในปัจจุบัน ถ้า cron job ของคุณอยู่ในรายการแสดงว่าถูกตั้งค่าเรียบร้อยแล้ว

---

### 3. **ตรวจสอบว่า cron job ทำงานหรือไม่**

- **เช็คผลลัพธ์จากไฟล์หรือ output**:
  - ในตัวอย่างข้างต้น จะมีไฟล์ `cron_test.log` ที่บันทึกข้อความทุกครั้งที่ cron job ทำงาน:
    ```bash
    cat /home/user/cron_test.log
    ```

    ถ้า cron job ทำงานตามที่ตั้งค่าไว้ คุณจะเห็นข้อความ "Hello, cron job!" ที่ถูกบันทึกในไฟล์ทุกวันเวลา 5:00 AM

- **เช็คระบบ Log**: ถ้า cron job เกิดข้อผิดพลาดหรือไม่ทำงาน สามารถตรวจสอบใน log ของระบบ:
  ```bash
  grep CRON /var/log/syslog
  ```

  บันทึก `CRON` จะบันทึกการทำงานทั้งหมดของ cron jobs รวมทั้งข้อผิดพลาดที่อาจเกิดขึ้น

---

### 4. **ทดสอบการทำงานทันที**

- **ทดสอบ cron job แบบทันที**: หากต้องการทดสอบ cron job โดยไม่ต้องรอให้มันทำงานตามเวลาที่กำหนด สามารถใช้คำสั่ง `run-parts` เพื่อทดสอบการทำงานของ cron job ได้ทันที:
  ```bash
  run-parts /etc/cron.daily
  ```

  หรือถ้าเป็น cron job ที่ตั้งค่าใน `crontab` ให้รันทันที:
  ```bash
  /home/user/cron_test.sh
  ```

  (หาก cron job เป็น script ที่มีไฟล์สคริปต์)

---

### 5. **เช็คว่าระบบรองรับการรัน cron jobs หรือไม่**

- บางครั้ง cron jobs อาจจะไม่ทำงานหาก daemon ของ `cron` ไม่ได้ทำงาน ตรวจสอบว่า `cron` กำลังทำงานอยู่:
  ```bash
  systemctl status cron
  ```

  ถ้า cron ไม่ได้ทำงานสามารถเริ่มการทำงานของ cron ด้วยคำสั่ง:
  ```bash
  sudo systemctl start cron
  ```

- หากต้องการให้ cron ทำงานอัตโนมัติทุกครั้งที่เริ่มระบบ ให้ใช้คำสั่ง:
  ```bash
  sudo systemctl enable cron
  ```

---

### 6. **ทดสอบการตั้งค่าเวลาของ cron job**

- **ทดสอบ cron job ตามเวลาที่ตั้ง**:
  ถ้า cron job ถูกตั้งให้ทำงานในเวลาที่เฉพาะเจาะจง เช่น ทุก ๆ 15 นาที ให้รอให้มันทำงานและตรวจสอบผลลัพธ์:
  ```bash
  tail -f /home/user/cron_test.log
  ```

  ในกรณีที่ตั้งให้ทำงานทุก 15 นาที ข้อมูลจะปรากฏในไฟล์ `cron_test.log` ทุก ๆ 15 นาที

---

### 7. **ทดสอบ cron job ด้วยการส่งอีเมล (optional)**

- บางครั้งการทดสอบ cron job โดยส่งผลลัพธ์ออกไปทางอีเมลเป็นวิธีที่ดีในการตรวจสอบว่า cron job ทำงานหรือไม่:
  
  ตัวอย่าง cron job ที่ส่งอีเมล:
  ```bash
  0 5 * * * echo "Hello, cron job!" | mail -s "Cron Job Test" user@example.com
  ```

  หาก cron job ทำงานจะได้รับอีเมลที่มีหัวข้อ "Cron Job Test" และข้อความ "Hello, cron job!"

---

### 8. **ตรวจสอบการทำงานของ cron log**
  
- ในบางกรณีถ้า cron job ไม่ทำงานตามที่คาดหวัง สามารถตรวจสอบ log ของระบบที่บันทึก cron jobs ได้ที่ `/var/log/syslog` หรือ `/var/log/cron` (ขึ้นอยู่กับการตั้งค่าของระบบ):

  ตรวจสอบ cron log:
  ```bash
  sudo tail -f /var/log/syslog
  ```

  หรือ
  ```bash
  sudo tail -f /var/log/cron
  ```

---

### 9. **แก้ไขปัญหาหาก cron job ไม่ทำงาน**

- **สิทธิ์การเข้าถึง**: ตรวจสอบว่า cron job ที่ตั้งไว้มีสิทธิ์ที่ถูกต้องในการทำงาน เช่น ไฟล์หรือสคริปต์ที่ตั้งให้ทำงานต้องสามารถเข้าถึงได้
  ```bash
  chmod +x /home/user/cron_test.sh
  ```

- **การตั้งค่าพาธ (Path)**: cron job อาจจะไม่รู้จักคำสั่งบางคำสั่งหากไม่ได้ตั้งค่า PATH ใน cron job ควรระบุ PATH ให้ชัดเจนใน cron job:
  ```bash
  PATH=/usr/sbin:/usr/bin:/sbin:/bin
  ```

---

### 10. **การลบหรือแก้ไข cron job**

- หากต้องการลบ cron job หรือแก้ไขการตั้งค่า cron job:
  ```bash
  crontab -e
  ```

  จากนั้นให้ลบหรือแก้ไขรายการ cron job ที่ต้องการ

---
